{"ast":null,"code":"// Simulerad data för demonstration\nconst mockUniversities = [{\n  id: 'kth',\n  name: 'Kungliga Tekniska Högskolan'\n}, {\n  id: 'su',\n  name: 'Stockholms Universitet'\n}, {\n  id: 'uu',\n  name: 'Uppsala Universitet'\n}, {\n  id: 'lu',\n  name: 'Lunds Universitet'\n}, {\n  id: 'gu',\n  name: 'Göteborgs Universitet'\n}];\n\n// Generera simulerad statistik för demonstration\nconst generateMockStatistics = () => {\n  const statistics = [];\n  mockUniversities.forEach(university => {\n    const programs = [{\n      id: `${university.id}-cs`,\n      name: 'Datavetenskap'\n    }, {\n      id: `${university.id}-eng`,\n      name: 'Civilingenjör'\n    }, {\n      id: `${university.id}-med`,\n      name: 'Läkarprogrammet'\n    }];\n    programs.forEach(program => {\n      for (let year = 2015; year <= 2023; year++) {\n        // Simulera en trend med ökande antal sökande\n        const baseApplicants = 500 + Math.floor(Math.random() * 500);\n        const yearFactor = (year - 2015) * 50;\n        const randomFactor = Math.floor(Math.random() * 200) - 100;\n        const applicants = baseApplicants + yearFactor + randomFactor;\n        const acceptedStudents = Math.floor(applicants * (0.1 + Math.random() * 0.2));\n        const firstHandApplicants = Math.floor(applicants * (0.4 + Math.random() * 0.3));\n        statistics.push({\n          id: `${program.id}-${year}`,\n          name: program.name,\n          universityId: university.id,\n          year,\n          applicants,\n          acceptedStudents,\n          firstHandApplicants\n        });\n      }\n    });\n  });\n  return statistics;\n};\nconst mockStatistics = generateMockStatistics();\n\n// Hämta alla lärosäten\nexport const getUniversities = async () => {\n  // I en riktig applikation skulle vi hämta data från en API\n  // return axios.get<University[]>('/api/universities').then(response => response.data);\n\n  return Promise.resolve(mockUniversities);\n};\n\n// Hämta statistik baserat på filter\nexport const getStatistics = async filter => {\n  // I en riktig applikation skulle vi hämta data från en API\n  // return axios.get<ProgramStatistics[]>('/api/statistics', { params: filter }).then(response => response.data);\n\n  let filteredStats = [...mockStatistics];\n  if (filter.universityId) {\n    filteredStats = filteredStats.filter(stat => stat.universityId === filter.universityId);\n  }\n  if (filter.fromYear) {\n    filteredStats = filteredStats.filter(stat => stat.year >= filter.fromYear);\n  }\n  if (filter.toYear) {\n    filteredStats = filteredStats.filter(stat => stat.year <= filter.toYear);\n  }\n  if (filter.programId) {\n    filteredStats = filteredStats.filter(stat => stat.id.startsWith(filter.programId));\n  }\n  return Promise.resolve(filteredStats);\n};\n\n// Hämta aggregerad statistik för ett lärosäte\nexport const getUniversityStatistics = async universityId => {\n  const stats = await getStatistics({\n    universityId\n  });\n\n  // Gruppera efter år\n  const yearGroups = {};\n  stats.forEach(stat => {\n    if (!yearGroups[stat.year]) {\n      yearGroups[stat.year] = [];\n    }\n    yearGroups[stat.year].push(stat);\n  });\n\n  // Skapa aggregerad statistik per år\n  const universityStats = Object.keys(yearGroups).map(yearStr => {\n    const year = parseInt(yearStr);\n    const programs = yearGroups[year];\n    const totalApplicants = programs.reduce((sum, prog) => sum + prog.applicants, 0);\n    const totalAcceptedStudents = programs.reduce((sum, prog) => sum + prog.acceptedStudents, 0);\n    return {\n      universityId,\n      year,\n      totalApplicants,\n      totalAcceptedStudents,\n      programs\n    };\n  });\n  return universityStats.sort((a, b) => a.year - b.year);\n};","map":{"version":3,"names":["mockUniversities","id","name","generateMockStatistics","statistics","forEach","university","programs","program","year","baseApplicants","Math","floor","random","yearFactor","randomFactor","applicants","acceptedStudents","firstHandApplicants","push","universityId","mockStatistics","getUniversities","Promise","resolve","getStatistics","filter","filteredStats","stat","fromYear","toYear","programId","startsWith","getUniversityStatistics","stats","yearGroups","universityStats","Object","keys","map","yearStr","parseInt","totalApplicants","reduce","sum","prog","totalAcceptedStudents","sort","a","b"],"sources":["C:/Users/saak0033/source/repos/IP/src/services/statisticsService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { University, ProgramStatistics, UniversityStatistics, StatisticsFilter } from '../models/types';\r\n\r\n// Simulerad data för demonstration\r\nconst mockUniversities: University[] = [\r\n  { id: 'kth', name: 'Kungliga Tekniska Högskolan' },\r\n  { id: 'su', name: 'Stockholms Universitet' },\r\n  { id: 'uu', name: 'Uppsala Universitet' },\r\n  { id: 'lu', name: 'Lunds Universitet' },\r\n  { id: 'gu', name: 'Göteborgs Universitet' },\r\n];\r\n\r\n// Generera simulerad statistik för demonstration\r\nconst generateMockStatistics = (): ProgramStatistics[] => {\r\n  const statistics: ProgramStatistics[] = [];\r\n  \r\n  mockUniversities.forEach(university => {\r\n    const programs = [\r\n      { id: `${university.id}-cs`, name: 'Datavetenskap' },\r\n      { id: `${university.id}-eng`, name: 'Civilingenjör' },\r\n      { id: `${university.id}-med`, name: 'Läkarprogrammet' },\r\n    ];\r\n    \r\n    programs.forEach(program => {\r\n      for (let year = 2015; year <= 2023; year++) {\r\n        // Simulera en trend med ökande antal sökande\r\n        const baseApplicants = 500 + Math.floor(Math.random() * 500);\r\n        const yearFactor = (year - 2015) * 50;\r\n        const randomFactor = Math.floor(Math.random() * 200) - 100;\r\n        \r\n        const applicants = baseApplicants + yearFactor + randomFactor;\r\n        const acceptedStudents = Math.floor(applicants * (0.1 + Math.random() * 0.2));\r\n        const firstHandApplicants = Math.floor(applicants * (0.4 + Math.random() * 0.3));\r\n        \r\n        statistics.push({\r\n          id: `${program.id}-${year}`,\r\n          name: program.name,\r\n          universityId: university.id,\r\n          year,\r\n          applicants,\r\n          acceptedStudents,\r\n          firstHandApplicants\r\n        });\r\n      }\r\n    });\r\n  });\r\n  \r\n  return statistics;\r\n};\r\n\r\nconst mockStatistics = generateMockStatistics();\r\n\r\n// Hämta alla lärosäten\r\nexport const getUniversities = async (): Promise<University[]> => {\r\n  // I en riktig applikation skulle vi hämta data från en API\r\n  // return axios.get<University[]>('/api/universities').then(response => response.data);\r\n  \r\n  return Promise.resolve(mockUniversities);\r\n};\r\n\r\n// Hämta statistik baserat på filter\r\nexport const getStatistics = async (filter: StatisticsFilter): Promise<ProgramStatistics[]> => {\r\n  // I en riktig applikation skulle vi hämta data från en API\r\n  // return axios.get<ProgramStatistics[]>('/api/statistics', { params: filter }).then(response => response.data);\r\n  \r\n  let filteredStats = [...mockStatistics];\r\n  \r\n  if (filter.universityId) {\r\n    filteredStats = filteredStats.filter(stat => stat.universityId === filter.universityId);\r\n  }\r\n  \r\n  if (filter.fromYear) {\r\n    filteredStats = filteredStats.filter(stat => stat.year >= filter.fromYear!);\r\n  }\r\n  \r\n  if (filter.toYear) {\r\n    filteredStats = filteredStats.filter(stat => stat.year <= filter.toYear!);\r\n  }\r\n  \r\n  if (filter.programId) {\r\n    filteredStats = filteredStats.filter(stat => stat.id.startsWith(filter.programId!));\r\n  }\r\n  \r\n  return Promise.resolve(filteredStats);\r\n};\r\n\r\n// Hämta aggregerad statistik för ett lärosäte\r\nexport const getUniversityStatistics = async (universityId: string): Promise<UniversityStatistics[]> => {\r\n  const stats = await getStatistics({ universityId });\r\n  \r\n  // Gruppera efter år\r\n  const yearGroups: { [key: number]: ProgramStatistics[] } = {};\r\n  stats.forEach(stat => {\r\n    if (!yearGroups[stat.year]) {\r\n      yearGroups[stat.year] = [];\r\n    }\r\n    yearGroups[stat.year].push(stat);\r\n  });\r\n  \r\n  // Skapa aggregerad statistik per år\r\n  const universityStats: UniversityStatistics[] = Object.keys(yearGroups).map(yearStr => {\r\n    const year = parseInt(yearStr);\r\n    const programs = yearGroups[year];\r\n    \r\n    const totalApplicants = programs.reduce((sum, prog) => sum + prog.applicants, 0);\r\n    const totalAcceptedStudents = programs.reduce((sum, prog) => sum + prog.acceptedStudents, 0);\r\n    \r\n    return {\r\n      universityId,\r\n      year,\r\n      totalApplicants,\r\n      totalAcceptedStudents,\r\n      programs\r\n    };\r\n  });\r\n  \r\n  return universityStats.sort((a, b) => a.year - b.year);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}