{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saak0033\\\\source\\\\repos\\\\IP\\\\src\\\\components\\\\GeographicDistributionDisplay.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getGeographicDistribution } from '../services/statisticsService';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\n\n// Registrera Chart.js-komponenter\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nconst GeographicDistributionDisplay = ({\n  universityId,\n  selectedYear\n}) => {\n  _s();\n  const [distributions, setDistributions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedDistribution, setSelectedDistribution] = useState(null);\n  useEffect(() => {\n    const fetchDistributions = async () => {\n      if (!universityId) {\n        setDistributions([]);\n        setSelectedDistribution(null);\n        return;\n      }\n      try {\n        setLoading(true);\n        const data = await getGeographicDistribution(universityId, selectedYear);\n        setDistributions(data);\n\n        // Välj den senaste distributionen om ingen år är valt\n        // eller den specifika distributionen för det valda året\n        if (data.length > 0) {\n          if (selectedYear) {\n            const yearDist = data.find(d => d.year === selectedYear);\n            setSelectedDistribution(yearDist || data[data.length - 1]);\n          } else {\n            setSelectedDistribution(data[data.length - 1]);\n          }\n        } else {\n          setSelectedDistribution(null);\n        }\n        setLoading(false);\n      } catch (err) {\n        setError('Kunde inte hämta geografisk fördelning. Försök igen senare.');\n        setLoading(false);\n      }\n    };\n    fetchDistributions();\n  }, [universityId, selectedYear]);\n  const handleYearChange = e => {\n    const year = parseInt(e.target.value);\n    const dist = distributions.find(d => d.year === year);\n    setSelectedDistribution(dist || null);\n  };\n  if (!universityId) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-selection\",\n      children: \"V\\xE4lj ett l\\xE4ros\\xE4te f\\xF6r att se geografisk f\\xF6rdelning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Laddar geografisk f\\xF6rdelning...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n  if (!selectedDistribution) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Ingen geografisk f\\xF6rdelning tillg\\xE4nglig f\\xF6r detta l\\xE4ros\\xE4te\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Förbereda data för cirkeldiagram\n  // Vi visar bara de 10 största regionerna och grupperar resten som \"Övriga\"\n  const topRegions = selectedDistribution.regionData.slice(0, 10);\n  const otherRegions = selectedDistribution.regionData.slice(10);\n  const otherPercentage = otherRegions.reduce((sum, region) => sum + region.percentage, 0);\n  const otherApplicants = otherRegions.reduce((sum, region) => sum + region.applicantCount, 0);\n  const chartLabels = [...topRegions.map(r => r.regionName)];\n  const chartData = [...topRegions.map(r => r.percentage)];\n  if (otherRegions.length > 0) {\n    chartLabels.push('Övriga');\n    chartData.push(otherPercentage);\n  }\n\n  // Generera slumpmässiga färger för diagrammet\n  const generateColors = count => {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      const r = Math.floor(Math.random() * 200);\n      const g = Math.floor(Math.random() * 200);\n      const b = Math.floor(Math.random() * 200);\n      colors.push(`rgba(${r}, ${g}, ${b}, 0.7)`);\n    }\n    return colors;\n  };\n  const backgroundColor = generateColors(chartLabels.length);\n  const pieData = {\n    labels: chartLabels,\n    datasets: [{\n      data: chartData,\n      backgroundColor,\n      borderColor: backgroundColor.map(color => color.replace('0.7', '1')),\n      borderWidth: 1\n    }]\n  };\n  const pieOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'right'\n      },\n      title: {\n        display: true,\n        text: `Geografisk fördelning av sökande (${selectedDistribution.year})`\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"geographic-distribution\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Geografisk f\\xF6rdelning av s\\xF6kande\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"year-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"year-select\",\n        children: \"V\\xE4lj \\xE5r: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"year-select\",\n        value: selectedDistribution.year,\n        onChange: handleYearChange,\n        className: \"year-select\",\n        children: distributions.map(dist => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: dist.year,\n          children: dist.year\n        }, dist.year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        data: pieData,\n        options: pieOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Detaljerad geografisk f\\xF6rdelning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Region\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Antal s\\xF6kande\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Andel (%)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: selectedDistribution.regionData.map(region => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: region.regionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: region.applicantCount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [region.percentage.toFixed(1), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this)]\n          }, region.regionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(GeographicDistributionDisplay, \"xEXOq9z9Fb/90lqXauLcumpT+Cw=\");\n_c = GeographicDistributionDisplay;\nexport default GeographicDistributionDisplay;\nvar _c;\n$RefreshReg$(_c, \"GeographicDistributionDisplay\");","map":{"version":3,"names":["React","useEffect","useState","getGeographicDistribution","Chart","ChartJS","ArcElement","Tooltip","Legend","Pie","jsxDEV","_jsxDEV","register","GeographicDistributionDisplay","universityId","selectedYear","_s","distributions","setDistributions","loading","setLoading","error","setError","selectedDistribution","setSelectedDistribution","fetchDistributions","data","length","yearDist","find","d","year","err","handleYearChange","e","parseInt","target","value","dist","className","children","fileName","_jsxFileName","lineNumber","columnNumber","topRegions","regionData","slice","otherRegions","otherPercentage","reduce","sum","region","percentage","otherApplicants","applicantCount","chartLabels","map","r","regionName","chartData","push","generateColors","count","colors","i","Math","floor","random","g","b","backgroundColor","pieData","labels","datasets","borderColor","color","replace","borderWidth","pieOptions","responsive","plugins","legend","position","title","display","text","htmlFor","id","onChange","options","toFixed","regionId","_c","$RefreshReg$"],"sources":["C:/Users/saak0033/source/repos/IP/src/components/GeographicDistributionDisplay.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { GeographicDistribution } from '../models/types';\r\nimport { getGeographicDistribution } from '../services/statisticsService';\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\n// Registrera Chart.js-komponenter\r\nChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\ninterface GeographicDistributionDisplayProps {\r\n  universityId: string;\r\n  selectedYear?: number;\r\n}\r\n\r\nconst GeographicDistributionDisplay: React.FC<GeographicDistributionDisplayProps> = ({ \r\n  universityId, \r\n  selectedYear \r\n}) => {\r\n  const [distributions, setDistributions] = useState<GeographicDistribution[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [selectedDistribution, setSelectedDistribution] = useState<GeographicDistribution | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDistributions = async () => {\r\n      if (!universityId) {\r\n        setDistributions([]);\r\n        setSelectedDistribution(null);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const data = await getGeographicDistribution(universityId, selectedYear);\r\n        setDistributions(data);\r\n        \r\n        // Välj den senaste distributionen om ingen år är valt\r\n        // eller den specifika distributionen för det valda året\r\n        if (data.length > 0) {\r\n          if (selectedYear) {\r\n            const yearDist = data.find(d => d.year === selectedYear);\r\n            setSelectedDistribution(yearDist || data[data.length - 1]);\r\n          } else {\r\n            setSelectedDistribution(data[data.length - 1]);\r\n          }\r\n        } else {\r\n          setSelectedDistribution(null);\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Kunde inte hämta geografisk fördelning. Försök igen senare.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDistributions();\r\n  }, [universityId, selectedYear]);\r\n\r\n  const handleYearChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const year = parseInt(e.target.value);\r\n    const dist = distributions.find(d => d.year === year);\r\n    setSelectedDistribution(dist || null);\r\n  };\r\n\r\n  if (!universityId) {\r\n    return <div className=\"no-selection\">Välj ett lärosäte för att se geografisk fördelning</div>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <div>Laddar geografisk fördelning...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">{error}</div>;\r\n  }\r\n\r\n  if (!selectedDistribution) {\r\n    return <div>Ingen geografisk fördelning tillgänglig för detta lärosäte</div>;\r\n  }\r\n\r\n  // Förbereda data för cirkeldiagram\r\n  // Vi visar bara de 10 största regionerna och grupperar resten som \"Övriga\"\r\n  const topRegions = selectedDistribution.regionData.slice(0, 10);\r\n  const otherRegions = selectedDistribution.regionData.slice(10);\r\n  \r\n  const otherPercentage = otherRegions.reduce((sum, region) => sum + region.percentage, 0);\r\n  const otherApplicants = otherRegions.reduce((sum, region) => sum + region.applicantCount, 0);\r\n  \r\n  const chartLabels = [...topRegions.map(r => r.regionName)];\r\n  const chartData = [...topRegions.map(r => r.percentage)];\r\n  \r\n  if (otherRegions.length > 0) {\r\n    chartLabels.push('Övriga');\r\n    chartData.push(otherPercentage);\r\n  }\r\n  \r\n  // Generera slumpmässiga färger för diagrammet\r\n  const generateColors = (count: number) => {\r\n    const colors = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const r = Math.floor(Math.random() * 200);\r\n      const g = Math.floor(Math.random() * 200);\r\n      const b = Math.floor(Math.random() * 200);\r\n      colors.push(`rgba(${r}, ${g}, ${b}, 0.7)`);\r\n    }\r\n    return colors;\r\n  };\r\n  \r\n  const backgroundColor = generateColors(chartLabels.length);\r\n  \r\n  const pieData = {\r\n    labels: chartLabels,\r\n    datasets: [\r\n      {\r\n        data: chartData,\r\n        backgroundColor,\r\n        borderColor: backgroundColor.map(color => color.replace('0.7', '1')),\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n  \r\n  const pieOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'right' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: `Geografisk fördelning av sökande (${selectedDistribution.year})`,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"geographic-distribution\">\r\n      <h2>Geografisk fördelning av sökande</h2>\r\n      \r\n      <div className=\"year-selector\">\r\n        <label htmlFor=\"year-select\">Välj år: </label>\r\n        <select \r\n          id=\"year-select\"\r\n          value={selectedDistribution.year}\r\n          onChange={handleYearChange}\r\n          className=\"year-select\"\r\n        >\r\n          {distributions.map(dist => (\r\n            <option key={dist.year} value={dist.year}>\r\n              {dist.year}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      <div className=\"chart-container\">\r\n        <Pie data={pieData} options={pieOptions} />\r\n      </div>\r\n      \r\n      <div className=\"region-table\">\r\n        <h3>Detaljerad geografisk fördelning</h3>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Region</th>\r\n              <th>Antal sökande</th>\r\n              <th>Andel (%)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selectedDistribution.regionData.map(region => (\r\n              <tr key={region.regionId}>\r\n                <td>{region.regionName}</td>\r\n                <td>{region.applicantCount}</td>\r\n                <td>{region.percentage.toFixed(1)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeographicDistributionDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}